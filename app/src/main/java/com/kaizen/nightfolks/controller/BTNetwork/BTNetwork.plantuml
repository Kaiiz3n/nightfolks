@startuml

title __BTNETWORK's Class Diagram__\n

  namespace com.kaizen.nightfolks {
    namespace controller.BTNetwork {
      class com.kaizen.nightfolks.controller.BTNetwork.AcceptThread {
          ~ mAdapter : BluetoothAdapter
          - applicationUUID : UUID
          - mContext : Context
          - mmServerSocket : BluetoothServerSocket
          + AcceptThread()
          + cancel()
          + run()
      }
    }
  }
  

  namespace com.kaizen.nightfolks {
    namespace controller.BTNetwork {
      class com.kaizen.nightfolks.controller.BTNetwork.BTConnectionService {
          {static} + MY_UUID_INSECURE : UUID
          ~ mContext : Context
          ~ mProgressDialog : ProgressDialog
          {static} - TAG : String
          {static} - appName : String
          - deviceUUID : UUID
          - mAdapter : BluetoothAdapter
          - mDevice : BluetoothDevice
          + BTConnectionService()
          + start()
          + startClient()
          + write()
          - connected()
      }
    }
  }
  

  namespace com.kaizen.nightfolks {
    namespace controller.BTNetwork {
      class com.kaizen.nightfolks.controller.BTNetwork.BTConnectionService.AcceptThread {
          - mServerSocket : BluetoothServerSocket
          + AcceptThread()
          + cancel()
          + run()
      }
    }
  }
  

  namespace com.kaizen.nightfolks {
    namespace controller.BTNetwork {
      class com.kaizen.nightfolks.controller.BTNetwork.BTConnectionService.ConnectThread {
          - mmSocket : BluetoothSocket
          + ConnectThread()
          + cancel()
          + run()
      }
    }
  }
  

  namespace com.kaizen.nightfolks {
    namespace controller.BTNetwork {
      class com.kaizen.nightfolks.controller.BTNetwork.BTConnectionService.ConnectedThread {
          - mInStream : InputStream
          - mOutStream : OutputStream
          - mSocket : BluetoothSocket
          + ConnectedThread()
          + cancel()
          + run()
          + write()
      }
    }
  }
  

  namespace com.kaizen.nightfolks {
    namespace controller.BTNetwork {
      class com.kaizen.nightfolks.controller.BTNetwork.ConnectThread {
          - applicationUUID : UUID
          - mAdapter : BluetoothAdapter
          - mContext : Context
          - mmDevice : BluetoothDevice
          - mmSocket : BluetoothSocket
          + ConnectThread()
          + cancel()
          + run()
      }
    }
  }
  

  namespace com.kaizen.nightfolks {
    namespace controller.BTNetwork {
      interface com.kaizen.nightfolks.controller.BTNetwork.IParticipant {
          {abstract} + destroy()
          {abstract} + discover()
          {abstract} + enableBT()
          {abstract} + getBTAdapter()
          {abstract} + getData()
          {abstract} + getMsg()
          {abstract} + getPairedDevices()
          {abstract} + getPairedDevicesAsMap()
          {abstract} + isBTEnabled()
          {abstract} + isBTSupported()
          {abstract} + makeDiscoverable()
          {abstract} + pairDevice()
          {abstract} + sendMsg()
          {abstract} + unSupportBT()
      }
    }
  }
  

  namespace com.kaizen.nightfolks {
    namespace controller.BTNetwork {
      class com.kaizen.nightfolks.controller.BTNetwork.Participant {
          ~ id : String
          ~ msgReceiver : BroadcastReceiver
          {static} - REQUEST_ENABLE_BT : int
          {static} - TAG : String
          - discoverableBroadcastReceiver : BroadcastReceiver
          - enableBTBroadcastReceiver : BroadcastReceiver
          - mAdapter : BluetoothAdapter
          - mBTDevices : Set<BluetoothDevice>
          - mContext : Context
          - mMessages : List<String>
          - pairedDevice : BluetoothDevice
          - pairingBroadcastReceiver : BroadcastReceiver
          - startDiscoveryBroadcastReceiver : BroadcastReceiver
          + Participant()
          + destroy()
          + discover()
          + enableBT()
          + getBTAdapter()
          + getData()
          + getId()
          + getMsg()
          + getPairedDevices()
          + getPairedDevicesAsMap()
          + isBTEnabled()
          + isBTSupported()
          + makeDiscoverable()
          + pairDevice()
          + sendMsg()
          + startConnection()
          + unSupportBT()
          - checkBTPermissions()
          - startBTConnection()
      }
    }
  }
  

  com.kaizen.nightfolks.controller.BTNetwork.BTConnectionService o-- com.kaizen.nightfolks.controller.BTNetwork.BTConnectionService.ConnectThread : mConnectThread
  com.kaizen.nightfolks.controller.BTNetwork.BTConnectionService o-- com.kaizen.nightfolks.controller.BTNetwork.BTConnectionService.ConnectedThread : mConnectedThread
  com.kaizen.nightfolks.controller.BTNetwork.BTConnectionService o-- com.kaizen.nightfolks.controller.BTNetwork.BTConnectionService.AcceptThread : mInsecureAcceptThread
  com.kaizen.nightfolks.controller.BTNetwork.BTConnectionService +-down- com.kaizen.nightfolks.controller.BTNetwork.BTConnectionService.AcceptThread
  com.kaizen.nightfolks.controller.BTNetwork.BTConnectionService +-down- com.kaizen.nightfolks.controller.BTNetwork.BTConnectionService.ConnectThread
  com.kaizen.nightfolks.controller.BTNetwork.BTConnectionService +-down- com.kaizen.nightfolks.controller.BTNetwork.BTConnectionService.ConnectedThread
  com.kaizen.nightfolks.controller.BTNetwork.Participant .up.|> com.kaizen.nightfolks.controller.BTNetwork.IParticipant
  com.kaizen.nightfolks.controller.BTNetwork.Participant o-- com.kaizen.nightfolks.controller.BTNetwork.BTConnectionService : btConnectionService


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
